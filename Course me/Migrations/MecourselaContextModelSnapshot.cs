// <auto-generated />
using System;
using Course_me.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Course_me.Migrations
{
    [DbContext(typeof(MecourselaContext))]
    partial class MecourselaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Course_me.Models.Analytic", b =>
                {
                    b.Property<int>("AnalyticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnalyticsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalyticsId"), 1L, 1);

                    b.Property<decimal?>("CaloriesBurned")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("CaloriesConsumed")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("DataDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<decimal?>("WaterIntakeLiters")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("AnalyticsId")
                        .HasName("PK__Analytic__506974C38EF6B003");

                    b.HasIndex("UserId");

                    b.ToTable("Analytics");
                });

            modelBuilder.Entity("Course_me.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ArticleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ArticleId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Course_me.Models.Diet", b =>
                {
                    b.Property<int>("DietId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DietID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DietId"), 1L, 1);

                    b.Property<int>("DietGoalId")
                        .HasColumnType("int")
                        .HasColumnName("DietGoalID");

                    b.Property<int>("DietTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DietTypeID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("DietId");

                    b.HasIndex("DietGoalId");

                    b.HasIndex("DietTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("Course_me.Models.DietGoal", b =>
                {
                    b.Property<int>("DietGoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DietGoalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DietGoalId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DietGoalId");

                    b.HasIndex(new[] { "Name" }, "UQ__DietGoal__737584F6F1CBA029")
                        .IsUnique();

                    b.ToTable("DietGoals");
                });

            modelBuilder.Entity("Course_me.Models.DietType", b =>
                {
                    b.Property<int>("DietTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DietTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DietTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DietTypeId");

                    b.HasIndex(new[] { "Name" }, "UQ__DietType__737584F63731DBAF")
                        .IsUnique();

                    b.ToTable("DietTypes");
                });

            modelBuilder.Entity("Course_me.Models.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DishID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishId"), 1L, 1);

                    b.Property<decimal?>("CaloriesPerPortion")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Recipe")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DishId");

                    b.HasIndex(new[] { "Name" }, "UQ__Dishes__737584F690711025")
                        .IsUnique();

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("Course_me.Models.DishProduct", b =>
                {
                    b.Property<int>("DishProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DishProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishProductId"), 1L, 1);

                    b.Property<int>("DishId")
                        .HasColumnType("int")
                        .HasColumnName("DishID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<decimal?>("QuantityGrams")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("DishProductId");

                    b.HasIndex("DishId");

                    b.HasIndex("ProductId");

                    b.ToTable("DishProducts");
                });

            modelBuilder.Entity("Course_me.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExerciseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"), 1L, 1);

                    b.Property<decimal?>("CaloriesBurnedPerMinute")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ExerciseId");

                    b.HasIndex(new[] { "Name" }, "UQ__Exercise__737584F673F886A9")
                        .IsUnique();

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Course_me.Models.ExerciseGoal", b =>
                {
                    b.Property<int>("ExerciseGoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExerciseGoalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseGoalId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ExerciseGoalId");

                    b.HasIndex(new[] { "Name" }, "UQ__Exercise__737584F66EB62A59")
                        .IsUnique();

                    b.ToTable("ExerciseGoals");
                });

            modelBuilder.Entity("Course_me.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FavoriteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"), 1L, 1);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FavoriteId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Course_me.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<decimal?>("CaloriesPer100g")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("CarbsPer100g")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("FatsPer100g")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("ProteinsPer100g")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("ProductId");

                    b.HasIndex(new[] { "Name" }, "UQ__Products__737584F6F2927319")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Course_me.Models.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReminderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"), 1L, 1);

                    b.Property<string>("ReminderText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ReminderTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReminderId");

                    b.HasIndex("UserId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Course_me.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"), 1L, 1);

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Course_me.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E4B4B4EE00")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534D264D2D8")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Course_me.Models.UserDetail", b =>
                {
                    b.Property<int>("UserDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDetailId"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("HeightCm")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<decimal?>("WeightKg")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("UserDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("Course_me.Models.WaterIntake", b =>
                {
                    b.Property<int>("WaterIntakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WaterIntakeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WaterIntakeId"), 1L, 1);

                    b.Property<decimal?>("AmountLiters")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("IntakeTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("WaterIntakeId");

                    b.HasIndex("UserId");

                    b.ToTable("WaterIntake", (string)null);
                });

            modelBuilder.Entity("Course_me.Models.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkoutID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutId"), 1L, 1);

                    b.Property<decimal?>("DurationMinutes")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("ExerciseID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("WorkoutTime")
                        .HasColumnType("datetime");

                    b.HasKey("WorkoutId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("UserId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("Course_me.Models.Analytic", b =>
                {
                    b.HasOne("Course_me.Models.User", "User")
                        .WithMany("Analytics")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Analytics__UserI__58D1301D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course_me.Models.Diet", b =>
                {
                    b.HasOne("Course_me.Models.DietGoal", "DietGoal")
                        .WithMany("Diets")
                        .HasForeignKey("DietGoalId")
                        .IsRequired()
                        .HasConstraintName("FK__Diets__DietGoalI__4D5F7D71");

                    b.HasOne("Course_me.Models.DietType", "DietType")
                        .WithMany("Diets")
                        .HasForeignKey("DietTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Diets__DietTypeI__4C6B5938");

                    b.HasOne("Course_me.Models.User", "User")
                        .WithMany("Diets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Diets__UserID__4B7734FF");

                    b.Navigation("DietGoal");

                    b.Navigation("DietType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course_me.Models.DishProduct", b =>
                {
                    b.HasOne("Course_me.Models.Dish", "Dish")
                        .WithMany("DishProducts")
                        .HasForeignKey("DishId")
                        .IsRequired()
                        .HasConstraintName("FK__DishProdu__DishI__41EDCAC5");

                    b.HasOne("Course_me.Models.Product", "Product")
                        .WithMany("DishProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__DishProdu__Produ__42E1EEFE");

                    b.Navigation("Dish");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Course_me.Models.Favorite", b =>
                {
                    b.HasOne("Course_me.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorites__UserI__395884C4");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course_me.Models.Reminder", b =>
                {
                    b.HasOne("Course_me.Models.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Reminders__UserI__65370702");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course_me.Models.Test", b =>
                {
                    b.HasOne("Course_me.Models.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Tests__UserID__5BAD9CC8");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course_me.Models.UserDetail", b =>
                {
                    b.HasOne("Course_me.Models.User", "User")
                        .WithMany("UserDetails")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserDetai__UserI__367C1819");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course_me.Models.WaterIntake", b =>
                {
                    b.HasOne("Course_me.Models.User", "User")
                        .WithMany("WaterIntakes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__WaterInta__UserI__5E8A0973");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course_me.Models.Workout", b =>
                {
                    b.HasOne("Course_me.Models.Exercise", "Exercise")
                        .WithMany("Workouts")
                        .HasForeignKey("ExerciseId")
                        .IsRequired()
                        .HasConstraintName("FK__Workouts__Exerci__625A9A57");

                    b.HasOne("Course_me.Models.User", "User")
                        .WithMany("Workouts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Workouts__UserID__6166761E");

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Course_me.Models.DietGoal", b =>
                {
                    b.Navigation("Diets");
                });

            modelBuilder.Entity("Course_me.Models.DietType", b =>
                {
                    b.Navigation("Diets");
                });

            modelBuilder.Entity("Course_me.Models.Dish", b =>
                {
                    b.Navigation("DishProducts");
                });

            modelBuilder.Entity("Course_me.Models.Exercise", b =>
                {
                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("Course_me.Models.Product", b =>
                {
                    b.Navigation("DishProducts");
                });

            modelBuilder.Entity("Course_me.Models.User", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("Diets");

                    b.Navigation("Favorites");

                    b.Navigation("Reminders");

                    b.Navigation("Tests");

                    b.Navigation("UserDetails");

                    b.Navigation("WaterIntakes");

                    b.Navigation("Workouts");
                });
#pragma warning restore 612, 618
        }
    }
}
